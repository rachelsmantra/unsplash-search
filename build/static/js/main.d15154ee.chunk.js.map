{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","photo","setPhoto","clientId","result","setResult","className","id","onSubmit","event","preventDefault","console","log","url","axios","get","then","response","data","results","onChange","target","value","type","name","placeholder","map","src","urls","small","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wRAiEeA,MA5Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAC9B,oEAHW,mBAENG,EAFM,aAMeH,mBAAS,KANxB,mBAMNI,EANM,KAMEC,EANF,KA4Bb,OACE,yBAAKC,UAAU,OACb,qDACA,0BACEC,GAAG,OACHD,UAAU,2CACVE,SAtBN,SAAsBC,GACpBA,EAAMC,iBACNC,QAAQC,IAAIX,GAEZ,IAAMY,EACJ,uDACAZ,EACA,cACAE,EAEFW,IAAMC,IAAIF,GAAKG,MAAK,SAAAC,GAClBN,QAAQC,IAAIK,GACZZ,EAAUY,EAASC,KAAKC,cAYtB,yBAAKb,UAAU,8BACb,2BACEc,SA9BV,SAAsBX,GACpBP,EAASO,EAAMY,OAAOC,QA8BdC,KAAK,OACLC,KAAK,QACLC,YAAY,SACZnB,UAAU,kBAGd,6BACE,4BAAQA,UAAU,yBAAyBiB,KAAK,UAAhD,YAKJ,yBAAKjB,UAAU,mBACZF,EAAOsB,KAAI,SAAAzB,GAAK,OACf,yBAAK0B,IAAK1B,EAAM2B,KAAKC,cC9CXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.d15154ee.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n  const [photo, setPhoto] = useState(\"\");\n  const [clientId, setClientId] = useState(\n    \"15627ce3a8b2f1fb677ac48f190bce0705fce6156f00640a574aa241dd688f8e\"\n  );\n\n  const [result, setResult] = useState([]);\n\n  function handleChange(event) {\n    setPhoto(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    console.log(photo);\n\n    const url =\n      \"https://api.unsplash.com/search/photos?page=1&query=\" +\n      photo +\n      \"&client_id=\" +\n      clientId;\n\n    axios.get(url).then(response => {\n      console.log(response);\n      setResult(response.data.results);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Unsplash Photo Search</h1>\n      <form\n        id=\"form\"\n        className=\"form-group d-flex justify-content-center\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"form-group input-container\">\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            name=\"photo\"\n            placeholder=\"Search\"\n            className=\"form-control\"\n          />\n        </div>\n        <div>\n          <button className=\"btn btn-success btn-lg\" type=\"submit\">\n            Search\n          </button>\n        </div>\n      </form>\n      <div className=\"photo-container\">\n        {result.map(photo => (\n          <img src={photo.urls.small} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}